import asyncio
import os
import sys

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommand, BotCommandScopeAllPrivateChats
from handlers.admin import admin_router
from handlers.user import user_router
from hydra import compose, initialize
from loguru import logger
from services.db_service import (
    create_db_engine_and_session_pool,
    create_tables,
    get_db_url,
)
from services.rag_service import RAGServiceError, initialize_lightrag_instance
from utils.config_loader import load_texts_from_config

try:
    with initialize(
        version_base=None, config_path="utils/conf", job_name="medical_university_bot"
    ):
        cfg = compose(config_name="config")
    logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Hydra —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

    if not hasattr(cfg, "server") or not cfg.server.API_KEY:
        raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API_KEY –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (server.API_KEY).")
    if not cfg.server.DB_NAME:
        raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç DB_NAME –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (server.DB_NAME).")
    if not hasattr(cfg, "llm") or not cfg.llm.api_base or not cfg.llm.model_name:
        raise ValueError(
            "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM (llm.api_base, llm.model_name)."
        )
    if (
        not hasattr(cfg, "embedding")
        or not cfg.embedding.api_base
        or not cfg.embedding.model_name
    ):
        raise ValueError(
            "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Embedding (embedding.api_base, embedding.model_name)."
        )


except Exception as e:
    print(
        f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Hydra: {e}",
        file=sys.stderr,
    )
    sys.exit("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Hydra.")


os.environ["QDRANT_URL"] = cfg.qdrant.get("url", "http://127.0.0.1:6333")

logger.remove()

logger.add(
    sys.stdout,
    format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {message}",
    level=cfg.logging.console_level
    if hasattr(cfg, "logging") and hasattr(cfg.logging, "console_level")
    else "INFO",
    colorize=True,
)

if (
    hasattr(cfg, "logging")
    and hasattr(cfg.logging, "file_path")
    and cfg.logging.file_path
):
    log_file_path = cfg.logging.file_path
    logger.add(
        log_file_path,
        rotation=cfg.logging.rotation if hasattr(cfg.logging, "rotation") else "100 MB",
        retention=cfg.logging.retention
        if hasattr(cfg.logging, "retention")
        else "10 days",
        compression=cfg.logging.compression
        if hasattr(cfg.logging, "compression")
        else "zip",
        level=cfg.logging.file_level if hasattr(cfg.logging, "file_level") else "DEBUG",
        format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line} - {message}",
        encoding="utf-8",
        enqueue=True,
        backtrace=True,
        diagnose=True,
    )
    logger.info(f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {log_file_path}")
else:
    logger.info(
        "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (–Ω–µ —É–∫–∞–∑–∞–Ω logging.file_path –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)."
    )

logger.info("–õ–æ–≥–≥–µ—Ä —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω.")


async def set_bot_commands(bot: Bot):
    user_commands = [
        BotCommand(command="start", description="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å / –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(
            command="toggle_mode",
            description="‚öôÔ∏è –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º LLM (–°—Ç–∞–Ω–¥–∞—Ä—Ç/–†–∞–∑–º—ã—à–ª–µ–Ω–∏–µ)",
        ),
        BotCommand(command="clear_history", description="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"),
    ]
    try:
        await bot.set_my_commands(
            commands=user_commands, scope=BotCommandScopeAllPrivateChats()
        )
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã {', '.join([c.command for c in user_commands])} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
        )
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}", exc_info=True
        )


async def main():
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")

    bot_texts = {}
    try:
        bot_texts = load_texts_from_config(cfg)
        logger.info("–¢–µ–∫—Å—Ç—ã –¥–ª—è –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    except Exception as e:
        logger.critical(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç—ã –¥–ª—è –±–æ—Ç–∞: {e}. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.",
            exc_info=True,
        )
        return

    engine, session_pool = None, None
    try:
        db_url_str = get_db_url(cfg.server)
        engine, session_pool = await create_db_engine_and_session_pool(
            db_url_str,
            echo=cfg.db.echo
            if hasattr(cfg, "db") and hasattr(cfg.db, "echo")
            else False,
        )
        await create_tables(engine)
        logger.info(
            f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ({cfg.server.DB_NAME}@{cfg.server.DB_HOST}) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã."
        )
    except ValueError as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}", exc_info=True)
        return
    except Exception as e:
        logger.critical(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True
        )
        return

    llm_base_cfg_dict = {
        "model_name": cfg.llm.get("model_name", "Qwen/Qwen3-8B"),
        "base_url": cfg.llm.get("api_base", "http://localhost:30000/v1"),
        "api_key": cfg.llm.get("api_key", "NO"),
        "default_temperature": cfg.llm.get("default_temperature", 0.7),
        "default_max_tokens": cfg.llm.get("default_max_tokens", 2048),
    }
    logger.info(f"–ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞: {llm_base_cfg_dict}")

    rag_instance = None
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LightRAG...")
        rag_instance = await initialize_lightrag_instance(cfg)
        logger.info("–≠–∫–∑–µ–º–ø–ª—è—Ä LightRAG —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    except RAGServiceError as e:
        logger.critical(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å LightRAG: {e}. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.",
            exc_info=True,
        )
        if engine:
            await engine.dispose()
        return
    except Exception as e:
        logger.critical(
            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LightRAG: {e}. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.",
            exc_info=True,
        )
        if engine:
            await engine.dispose()
        return

    storage = MemoryStorage()
    logger.info(f"–•—Ä–∞–Ω–∏–ª–∏—â–µ FSM: {type(storage).__name__}")

    dp = Dispatcher(
        storage=storage,
        session_pool=session_pool,
        bot_texts=bot_texts,
        engine=engine,
        rag_instance=rag_instance,
        llm_base_config=llm_base_cfg_dict,
    )
    logger.info("–î–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–∑–¥–∞–Ω –∏ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω.")

    dp.include_router(user_router)
    dp.include_router(admin_router)
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ —Ä–æ—É—Ç–µ—Ä—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

    bot = Bot(
        token=cfg.server.API_KEY,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )
    bot_info = await bot.get_me()
    logger.info(f"–≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω –¥–ª—è @{bot_info.username} (ID: {bot_info.id}).")

    await set_bot_commands(bot)

    try:
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except Exception as e:
        logger.critical(
            f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞ (polling): {e}", exc_info=True
        )
    finally:
        logger.warning("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        if "engine" in dp.workflow_data and dp.workflow_data["engine"]:
            await dp.workflow_data["engine"].dispose()
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

        if bot and bot.session:
            await bot.session.close()
            logger.info("–°–µ—Å—Å–∏—è Telegram –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
        logger.warning("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é (KeyboardInterrupt –∏–ª–∏ SystemExit).")
    except Exception as e:
        print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê (–≤–æ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏): {e}", file=sys.stderr)
        logger.critical(
            f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}",
            exc_info=True,
        )
        sys.exit(1)
