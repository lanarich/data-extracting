import asyncio
import os
import sys
from typing import Optional

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommand, BotCommandScopeAllPrivateChats
from handlers.admin import admin_router
from handlers.user import user_router
from hydra import compose, initialize
from langchain_openai import ChatOpenAI
from langfuse import Langfuse
from langfuse.callback import CallbackHandler as LangfuseCallbackHandler
from langgraph.graph import StatefulGraph
from lightrag import LightRAG
from loguru import logger
from omegaconf import DictConfig
from services.db_service import (
    create_db_engine_and_session_pool,
    create_tables,
    get_db_url,
)
from services.rag_service import initialize_lightrag_instance
from utils.config_loader import load_texts_from_config

from app.agents.graph import create_tutor_graph

langfuse_callback_handler: Optional[LangfuseCallbackHandler] = None
langfuse_client: Optional[Langfuse] = None
cfg: Optional[DictConfig] = None

try:
    with initialize(
        version_base=None, config_path="utils/conf", job_name="medical_university_bot"
    ):
        cfg = compose(config_name="config")
    logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Hydra —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

    if not hasattr(cfg, "server") or not cfg.server.API_KEY:
        raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API_KEY –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (server.API_KEY).")
    if not hasattr(cfg, "llm") or not cfg.llm.api_base or not cfg.llm.model_name:
        raise ValueError(
            "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM (llm.api_base, llm.model_name)."
        )
    if (
        not hasattr(cfg, "embedding")
        or not cfg.embedding.api_base
        or not cfg.embedding.model_name
    ):
        raise ValueError(
            "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Embedding (embedding.api_base, embedding.model_name)."
        )

    if (
        not hasattr(cfg, "langfuse")
        or not hasattr(cfg.langfuse, "public_key")
        or not hasattr(cfg.langfuse, "secret_key")
        or not hasattr(cfg.langfuse, "host")
    ):
        logger.warning(
            "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Langfuse –Ω–µ–ø–æ–ª–Ω–∞—è –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ config.yaml. Langfuse –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω."
        )
        if hasattr(cfg, "langfuse"):
            cfg.langfuse.enabled = False
        else:
            from omegaconf import OmegaConf

            cfg.langfuse = OmegaConf.create(
                {"enabled": False, "public_key": None, "secret_key": None, "host": None}
            )
    elif (
        not cfg.langfuse.public_key
        or not cfg.langfuse.secret_key
        or not cfg.langfuse.host
    ):
        logger.warning(
            "–ö–ª—é—á–∏ –∏–ª–∏ —Ö–æ—Å—Ç Langfuse –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ config.yaml. Langfuse –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω."
        )
        cfg.langfuse.enabled = False


except Exception as e:
    print(
        f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Hydra: {e}",
        file=sys.stderr,
    )
    sys.exit("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Hydra.")


os.environ["QDRANT_URL"] = cfg.qdrant.get("url", "http://127.0.0.1:6333")

logger.remove()
logger.add(
    sys.stdout,
    format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {message}",
    level=cfg.logging.console_level
    if hasattr(cfg.logging, "console_level")
    else "INFO",
    colorize=True,
)

if (
    hasattr(cfg, "logging")
    and hasattr(cfg.logging, "file_path")
    and cfg.logging.file_path
):
    log_file_path = cfg.logging.file_path
    logger.add(
        log_file_path,
        rotation=cfg.logging.rotation if hasattr(cfg.logging, "rotation") else "100 MB",
        retention=cfg.logging.retention
        if hasattr(cfg.logging, "retention")
        else "10 days",
        compression=cfg.logging.compression
        if hasattr(cfg.logging, "compression")
        else "zip",
        level=cfg.logging.file_level if hasattr(cfg.logging, "file_level") else "DEBUG",
        format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line} - {message}",
        encoding="utf-8",
        enqueue=True,
        backtrace=True,
        diagnose=True,
    )
    logger.info(f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {log_file_path}")
else:
    logger.info(
        "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (–Ω–µ —É–∫–∞–∑–∞–Ω logging.file_path –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)."
    )

logger.info("–õ–æ–≥–≥–µ—Ä —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω.")


if cfg.langfuse.enabled:
    try:
        langfuse_client = Langfuse(
            public_key=cfg.langfuse.public_key,
            secret_key=cfg.langfuse.secret_key,
            host=cfg.langfuse.host,
            release=cfg.langfuse.get("release"),
            debug=cfg.langfuse.get("debug", False),
        )
        langfuse_callback_handler = LangfuseCallbackHandler(
            public_key=cfg.langfuse.public_key,
            secret_key=cfg.langfuse.secret_key,
            host=cfg.langfuse.host,
            release=cfg.langfuse.get("release"),
        )
        logger.info(
            f"Langfuse —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. Release: {cfg.langfuse.get('release')}"
        )
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Langfuse: {e}. Langfuse –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω.",
            exc_info=True,
        )
        cfg.langfuse.enabled = False
        langfuse_callback_handler = None
        langfuse_client = None
else:
    logger.info("Langfuse –æ—Ç–∫–ª—é—á–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
    langfuse_callback_handler = None
    langfuse_client = None


async def set_bot_commands(bot: Bot):
    user_commands = [
        BotCommand(command="start", description="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å / –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(
            command="toggle_mode",
            description="‚öôÔ∏è –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º LLM (–°—Ç–∞–Ω–¥–∞—Ä—Ç/–†–∞–∑–º—ã—à–ª–µ–Ω–∏–µ)",
        ),
        BotCommand(command="clear_history", description="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"),
    ]
    try:
        await bot.set_my_commands(
            commands=user_commands, scope=BotCommandScopeAllPrivateChats()
        )
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã {', '.join([c.command for c in user_commands])} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
        )
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}", exc_info=True
        )


async def main():
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")

    bot_texts = {}
    try:
        bot_texts = load_texts_from_config(cfg)
        logger.info("–¢–µ–∫—Å—Ç—ã –¥–ª—è –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    except Exception as e:
        logger.critical(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç—ã –¥–ª—è –±–æ—Ç–∞: {e}. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.",
            exc_info=True,
        )
        return

    engine, session_pool = None, None
    try:
        db_url_str = get_db_url(cfg.server)
        engine, session_pool = await create_db_engine_and_session_pool(
            db_url_str,
            echo=cfg.db.echo
            if hasattr(cfg, "db") and hasattr(cfg.db, "echo")
            else False,
        )
        await create_tables(
            engine
        )  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ create_tables —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        logger.info(
            f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î ({cfg.server.DB_NAME}@{cfg.server.DB_HOST}) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã."
        )
    except Exception as e:  # –ë–æ–ª–µ–µ –æ–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î: {e}", exc_info=True)
        return

    langchain_llm = ChatOpenAI(
        model=cfg.llm.model_name,
        openai_api_base=cfg.llm.api_base,
        openai_api_key=cfg.llm.api_key,
        temperature=cfg.llm.get("default_temperature", 0.7),
        max_tokens=cfg.llm.get("default_max_tokens", 2048),
    )
    logger.info(f"Langchain LLM ({cfg.llm.model_name}) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤.")

    rag_instance: Optional[LightRAG] = None
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LightRAG...")
        rag_instance = await initialize_lightrag_instance(cfg)
        logger.info("–≠–∫–∑–µ–º–ø–ª—è—Ä LightRAG —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:  # –ë–æ–ª–µ–µ –æ–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        logger.critical(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å LightRAG: {e}. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.",
            exc_info=True,
        )
        if engine:
            await engine.dispose()
        return

    if not rag_instance:
        logger.critical("–≠–∫–∑–µ–º–ø–ª—è—Ä rag_instance –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        if engine:
            await engine.dispose()
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –ò–ò –¢—å—é—Ç–æ—Ä–∞
    tutor_graph: Optional[StatefulGraph] = None
    try:
        tutor_graph = create_tutor_graph(
            llm=langchain_llm, rag_instance=rag_instance, session_pool=session_pool
        )
        logger.info("–ì—Ä–∞—Ñ –ò–ò –¢—å—é—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
    except Exception as e:
        logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ –ò–ò –¢—å—é—Ç–æ—Ä–∞: {e}", exc_info=True)
        if engine:
            await engine.dispose()
        return

    storage = MemoryStorage()
    logger.info(f"–•—Ä–∞–Ω–∏–ª–∏—â–µ FSM: {type(storage).__name__}")

    dp_kwargs = {
        "storage": storage,
        "session_pool": session_pool,
        "bot_texts": bot_texts,
        "engine": engine,
        "rag_instance": rag_instance,  # –î–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏, –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–∏
        "llm_base_config": cfg.llm,  # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM –¥–ª—è LightRAG, –µ—Å–ª–∏ –æ–Ω –µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
        "langchain_llm": langchain_llm,  # LLM –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤ LangGraph
        "tutor_graph": tutor_graph,  # –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ
        "cfg": cfg,
    }
    if cfg.langfuse.enabled and langfuse_callback_handler:
        dp_kwargs["langfuse_handler"] = langfuse_callback_handler
        logger.info("Langfuse callback handler –ø–µ—Ä–µ–¥–∞–Ω –≤ Dispatcher.")

    dp = Dispatcher(**dp_kwargs)
    logger.info("–î–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–∑–¥–∞–Ω –∏ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω.")

    dp.include_router(user_router)
    dp.include_router(admin_router)
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ —Ä–æ—É—Ç–µ—Ä—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

    bot = Bot(
        token=cfg.server.API_KEY,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )
    # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å main –∫–∞–∫ –±—ã–ª–∞) ...
    bot_info = await bot.get_me()
    logger.info(f"–≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω –¥–ª—è @{bot_info.username} (ID: {bot_info.id}).")

    await set_bot_commands(bot)

    try:
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except Exception as e:
        logger.critical(
            f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞ (polling): {e}", exc_info=True
        )
    finally:
        logger.warning("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        if engine:
            await engine.dispose()
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

        global langfuse_client  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        if cfg and cfg.langfuse.enabled and langfuse_client:
            langfuse_client.flush()
            logger.info("Langfuse —Å–µ—Å—Å–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π.")

        if bot and bot.session:
            await bot.session.close()
            logger.info("–°–µ—Å—Å–∏—è Telegram –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
        logger.warning("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é (KeyboardInterrupt –∏–ª–∏ SystemExit).")
